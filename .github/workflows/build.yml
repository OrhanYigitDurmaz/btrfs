name: build

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/etc/eselect/wine/bin

jobs:
  cmake:
    runs-on: msvc-wine
    steps:
      - name: Checkout repository (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Derive short SHA
        run: echo "SHORT_SHA=$(echo '${{ github.sha }}' | cut -c1-8)" >> "$GITHUB_ENV"

      - name: Prepare build directories
        run: |
          mkdir -p build/debug/{amd64,x86,aarch64,arm}
          mkdir -p build/release/{amd64,x86,aarch64,arm}
          mkdir -p build/pdb/{debug,release}/{amd64,x86,aarch64,arm}

      - name: Configure + build (Debug, amd64)
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-amd64.cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_TEST=OFF -S . -B build/debug/amd64
          cmake --build build/debug/amd64 --parallel "$(nproc)"

      - name: Configure + build (Debug, x86)
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-x86.cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_TEST=OFF -S . -B build/debug/x86
          cmake --build build/debug/x86 --parallel "$(nproc)"

      - name: Configure + build (Debug, aarch64)
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-aarch64.cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_TEST=OFF -S . -B build/debug/aarch64
          cmake --build build/debug/aarch64 --parallel "$(nproc)"

      - name: Configure + build (Debug, armv7)
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-armv7.cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_TEST=OFF -S . -B build/debug/arm
          cmake --build build/debug/arm --parallel "$(nproc)"

      - name: Configure + build (RelWithDebInfo, amd64)
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-amd64.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S . -B build/release/amd64
          cmake --build build/release/amd64 --parallel "$(nproc)"

      - name: Configure + build (RelWithDebInfo, x86)
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-x86.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S . -B build/release/x86
          cmake --build build/release/x86 --parallel "$(nproc)"

      - name: Configure + build (RelWithDebInfo, aarch64)
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-aarch64.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S . -B build/release/aarch64
          cmake --build build/release/aarch64 --parallel "$(nproc)"

      - name: Configure + build (RelWithDebInfo, armv7)
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=msvc-armv7.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TEST=OFF -S . -B build/release/arm
          cmake --build build/release/arm --parallel "$(nproc)"

      - name: Collect PDBs
        shell: bash
        run: |
          mv build/debug/amd64/*.pdb build/pdb/debug/amd64/ || true
          mv build/debug/x86/*.pdb build/pdb/debug/x86/ || true
          mv build/debug/aarch64/*.pdb build/pdb/debug/aarch64/ || true
          mv build/debug/arm/*.pdb build/pdb/debug/arm/ || true
          mv build/release/amd64/*.pdb build/pdb/release/amd64/ || true
          mv build/release/x86/*.pdb build/pdb/release/x86/ || true
          mv build/release/aarch64/*.pdb build/pdb/release/aarch64/ || true
          mv build/release/arm/*.pdb build/pdb/release/arm/ || true

      - name: Copy INF templates
        run: |
          cp ./src/{btrfs,btrfs-vol}.inf build/debug/
          cp ./src/{btrfs,btrfs-vol}.inf build/release/

      - name: Stamp INFs (debug)
        run: |
          stampinf -f build/debug/btrfs.inf -d \* -v \*
          stampinf -f build/debug/btrfs-vol.inf -d \* -v \*

      - name: Stamp INFs (release)
        run: |
          stampinf -f build/release/btrfs.inf -d \* -v \*
          stampinf -f build/release/btrfs-vol.inf -d \* -v \*

      - name: Generate CATs
        run: |
          (cd build/debug && makecat ../../src/btrfs.cdf)
          (cd build/release && makecat ../../src/btrfs.cdf)

      - name: Write code signing certificate
        env:
          CERTIFICATE: ${{ secrets.CERTIFICATE }}
        run: echo "${CERTIFICATE}" > codesigning.crt

      - name: Sign catalog files
        env:
          PKCS11CERT: ${{ secrets.PKCS11CERT }}
          PKCS11KEY: ${{ secrets.PKCS11KEY }}
        run: |
          for i in build/{debug,release}/btrfs.cat; do
            osslsigncode sign \
              -pkcs11module /usr/lib64/libcrypto3PKCS.so \
              -pkcs11cert "${PKCS11CERT}" \
              -key "${PKCS11KEY}" \
              -certs codesigning.crt \
              -t http://timestamp.sectigo.com \
              -h sha256 \
              -in "$i" -out "$i"
          done

      - name: Sign binaries
        env:
          PKCS11CERT: ${{ secrets.PKCS11CERT }}
          PKCS11KEY: ${{ secrets.PKCS11KEY }}
        run: |
          for i in build/{debug,release}/{amd64,x86,aarch64,arm}/{btrfs.sys,mkbtrfs.exe,shellbtrfs.dll,ubtrfs.dll}; do
            [ -f "$i" ] || continue
            osslsigncode sign \
              -pkcs11module /usr/lib64/libcrypto3PKCS.so \
              -pkcs11cert "${PKCS11CERT}" \
              -key "${PKCS11KEY}" \
              -certs codesigning.crt \
              -t http://timestamp.sectigo.com \
              -h sha256 \
              -in "$i" -out "$i"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.sha }}
          overwrite: true
          path: |
            build/**/btrfs.sys
            build/**/mkbtrfs.exe
            build/**/shellbtrfs.dll
            build/**/ubtrfs.dll
            build/**/*.inf
            build/**/*.cat
            build/pdb
